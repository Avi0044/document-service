---
- name: Download binary file from Jfrog
  hosts: prod-server
  vars:
    workspace: "{{ lookup('env','WORKSPACE') }}"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: "{{sshKeyFilePath}}"
    jfrog_pass: "{{ lookup('aws_secret', 'Optimus-prime/uat/jfrog-cred', region='ap-south-1') }}"

  tasks:
    - name: Copy service template to location
      become: yes
      become_user: root
      copy:
        src: "{{workspace}}/ansible/services/{{appName}}.service"
        dest: "/etc/systemd/system/"

    - name: Enable service
      become: yes
      become_user: root
      systemd:
        name: "{{appName}}"
        enabled: yes

    - name: Get the latest SNAPSHOT version
      uri:
        url: "{{jfrogUrl}}/artifactory/{{jfrogRepository}}/{{jfrogArtifactId}}/{{appName}}/maven-metadata.xml"
        method: GET
        user: "{{jfrogUserName}}"
        password: "{{jfrog_pass}}"
        return_content: yes
        body_format: json
      register: result

    - name: Get jar version
      delegate_to: localhost
      xml:
        xmlstring: "{{result.content}}"
        xpath: /metadata/versioning/latest
        content: "text"
      register: jar_version
    - debug: msg={{jar_version}}

    - name: Set build var
      set_fact:
        buildNumber: "{{jar_version.matches[0]['latest'].split('-')[1]}}"

    - name: Set directories vars
      set_fact:
        downloadDir: "/tmp/download/{{buildNumber}}/{{appName}}"
        backupDir: "/tmp/backup"
        deploymentDir: "{{appPath}}/{{appName}}"

    - name: Create download directory if not exists
      file:
        path: "{{downloadDir}}"
        state: directory
        mode: "0755"

    - name: Create Backup directory if not exists
      file:
        path: "{{backupDir}}"
        state: directory
        mode: "0755"

    - name: Download jar file from Jfrog
      get_url:
        url: "{{jfrogUrl}}/artifactory/{{jfrogRepository}}/{{jfrogArtifactId}}/{{appName}}/{{jar_version.matches[0]['latest']}}/{{appName}}-{{jar_version.matches[0]['latest']}}.jar"
        url_username: "{{jfrogUserName}}"
        url_password: "{{jfrog_pass}}"
        dest: "{{downloadDir}}/"
        force: yes

    - name: Stop {{appName}} Service
      become: yes
      become_user: root
      script:
        cmd: "{{workspace}}/ansible/scripts/{{appName}}/stop.sh"
      register: stop_status
    - debug: msg={{stop_status.stdout_lines}}

    - name: Check {{appName}} service has Stopped
      script:
        cmd: "{{workspace}}/ansible/scripts/{{appName}}/status.sh"
      register: check_stop_status
      failed_when: check_stop_status.rc != 3 and "stdout_lines" in check_stop_status.stdout_lines
    - debug: msg={{check_stop_status.stdout_lines}}

    - name: Check previous deployment exists or not
      stat:
        path: "{{deploymentDir}}/{{appName}}.jar"
      register: previous_deployment_stat

    - name: Backup Old files
      shell: "mv {{deploymentDir}}/{{appName}}.jar {{backupDir}}/"
      register: bkp
      when: previous_deployment_stat.stat.exists

    - name: Create deployment directory if not exists
      file:
        path: "{{deploymentDir}}"
        state: directory
        mode: "0755"

    - name: Copy downloaded jar to deployment location
      become: yes
      become_user: root
      command: "cp {{downloadDir}}/{{appName}}-{{jar_version.matches[0]['value']}}.jar {{deploymentDir}}/{{appName}}.jar"
      register: copy_status
    - debug: msg={{copy_status.stdout_lines}}

    - name: Start {{appName}} Service
      become: yes
      become_user: root
      script:
        cmd: "{{workspace}}/ansible/scripts/{{appName}}/start.sh"
      register: start_status
      failed_when: start_status.rc != 3 and "stdout_lines" in start_status.stdout_lines
    - debug: msg={{start_status.stdout_lines}}

    - name: Check {{appName}} service has started
      script:
        cmd: "{{workspace}}/ansible/scripts/{{appName}}/status.sh"
      register: check_start_status
      failed_when: check_start_status.rc != 3 and "stdout_lines" in check_start_status.stdout_lines
    - debug: msg={{check_start_status.stdout_lines}}

    - name: Delete download directory
      file:
        path: "/tmp/download/"
        state: absent